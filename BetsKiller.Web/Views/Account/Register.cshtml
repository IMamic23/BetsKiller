@using BotDetect.Web.Mvc;

@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Account/_Layout.cshtml";
}

@model BetsKiller.ViewModel.Account.RegisterViewModel

@section Styles {
    <link href="@BotDetect.Web.CaptchaUrls.Absolute.LayoutStyleSheetUrl" rel="stylesheet" type="text/css" />
}

<div class="register-box-body">

    <h3 class="login-box-msg">Sign Up</h3>

    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary("", new { @style = "color: red" })

        <div class="form-group has-feedback">
            @Html.LabelFor(x => x.FullName, "Full name:", new { @class = "white" })
            @Html.TextBoxFor(x => x.FullName, new { @class = "form-control", @placeholder = "What your Mother call's you..."})
            <span class="glyphicon glyphicon-user form-control-feedback"></span>
        </div>

        <div class="form-group has-feedback">
            @Html.LabelFor(x => x.Email, "Email address:", new { @class = "white" })
            @Html.TextBoxFor(x => x.Email, new { @class = "form-control", @placeholder = "Where you receive cat gif's..." })
            <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
        </div>

        <div class="form-group has-feedback">
            @Html.LabelFor(x => x.Password, "Password:", new { @class = "white" })
            @Html.PasswordFor(x => x.Password, new { @class = "form-control", @placeholder = "Keep it private like your Porn history..." })
            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
        </div>

        <div class="form-group has-feedback">
            @Html.LabelFor(x => x.ConfirmPassword, "Retype password:", new { @class = "white" })
            @Html.PasswordFor(x => x.ConfirmPassword, new { @class = "form-control", @placeholder = "Surely you can't be serious..." })
            <span class="glyphicon glyphicon-log-in form-control-feedback"></span>
        </div>

            MvcCaptcha registrationCaptcha = BetsKiller.Web.App_Code.CaptchaHelper.GetRegistrationCaptcha();
             
            if (!registrationCaptcha.IsSolved)
            {
                <div class="form-group">

                    @Html.Label("Retype the code", new
                    {
                        //@class = "col-md-4 control-label",
                        @style = "color: white",
                        @for = "CaptchaCode"
                    })

                    <div>
                        @Html.Captcha(registrationCaptcha)
                    </div>

                    <div>
                        @Html.TextBox("CaptchaCode", null, new { @class = "form-control captchaVal" })
                    </div>
                </div>
            }
            
            <div class="row">
            <div class="col-xs-8">
                <div class="checkbox icheck">
                    <label>
                        @Html.CheckBoxFor(x => x.TermsConfirmed)
                        <span style="color:white"> I'm down with the</span> <a href="@Url.Action("TermsOfUse", "Home")">terms</a>
                    </label>
                </div>
            </div>

            <div class="col-xs-4">
                <button type="submit" class="btn btn-primary btn-block btn-flat btn_purple">Sign Up</button>
            </div>
        </div>
    }

    <div class="social-auth-links text-center">
        <p>- OR -</p>
        <a href="#" class="btn btn-block btn-social btn-facebook btn-flat"><i class="fa fa-facebook"></i> Sign up using Facebook</a>
        <a href="#" class="btn btn-block btn-social btn-google btn-flat"><i class="fa fa-google-plus"></i> Sign up using Google+</a>
    </div>

    <div class="text-center">
        @Html.ActionLink("Log In", "Login", "Account", new { @class = "text-center" })
    </div>

</div>

@section Scripts {
    <script>

    $('#check').click(function checkForm(event) {

        $('#status').attr('class', 'inProgress');
        $('#status').text('Checking...');

        // get client-side Captcha object instance
        var captchaObj = $("#CaptchaCode").get(0).Captcha;

        // gather data required for Captcha validation
        var params = {}
        params.CaptchaId = captchaObj.Id;
        params.InstanceId = captchaObj.InstanceId;
        params.UserInput = $("#CaptchaCode").val();

        // make asynchronous Captcha validation request
        $.getJSON('@Url.Action("CheckCaptcha", "Account")', params, function (result) {
            if (true === result) {
                $('#status').attr('class', 'correct');
                $('#status').text('Check passed');
            } else {
                $('#status').attr('class', 'incorrect');
                $('#status').text('Check failed');
                // always change Captcha code if validation fails
                captchaObj.ReloadImage();
            }
        });

        event.preventDefault();
    })

    // extend jquery range validator to work for required checkboxes
    var defaultRangeValidator = $.validator.methods.range;
    $.validator.methods.range = function (value, element, param) {
        if (element.type === 'checkbox') {
            // if it's a checkbox return true if it is checked
            return element.checked;
        } else {
            // otherwise run the default validation function
            return defaultRangeValidator();
        }
    }

    </script>
}